Selection sort
General logic: Iterate through array -> find the min value to current element's right -> swap current and min value.
How it works: Start from the first element of the array and find the minimum value to it's right and once the value is found swap the minimum value and current element.

Implementation:
public class SelectionSort {
	public static void sort (Comparable[] a) {
		int N = a.length;

		for (int i = 0; i < N; i++) {
			int min = i;
			for (int j = i + 1; j < N; j++) {
				if (less(a[j], a[min]) {
					min = j;
				}
			}
			exch(a, min, i);
		}
	}
	
	public static boolean less (Comparable v, Comparable w) {
		return v.compareTo(w) < 0;
	}

	public static void exch (Comparable[] a, int i, int j) {
		Comparable temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
}

Algorithm performance:
Quadratic O(n^2) time.
Constant O(1) space (sorting in place).

Stability: not stable