Queues
1. Operations: isEmpty, enqueue, dequeue.
2. How it works: First In First Out || Last In Last Out

Operations of the Queues
1. enqueue (add)
	
	listStart -> n1 -> n2

	1.1. Save the link to last node
	
		Node oldLast = last;
		listStart -> n1 -> n2
		           	   /
		       		oldLast

	1.2. Initialize the current last with a new node and set it to null
	
		last = new Node();
		last.item = newitem;
		last.next = null;

		listStart -> n1 -> oldLast     n2 -> null
		       		
		
	1.3. Check if queue is empty

		if (isEmpty()) first = last;

	1.4. Enqueue the node
		
		else oldLast.next = last;
		listStart -> n1 -> oldLast -> n2

2. dequeue (delete)

	first -> n1 -> n2

	1.1. Make the first point to second
		
		first = first.next;
		first -> n2

Implementation of the queue using linked list

public class Queue {
	private Node first, last;

	private class Node {
		Node next;
		String item;
	}

	public boolean isEmpty () {
		return first == null;
	}

	public String dequeue () {
		String item = first.item;
		first = first.next;
		if (isEmpty()) last = null;
		return item;
	}

	public void enqueue (String item) {
		Node oldLast = last;
		last = new Node();
		last.item = item;
		last.next = null;
		
		if (isEmpty()) first = last;
		else oldLast.next = last;
	}
}








